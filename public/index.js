// src/index.ts
import { DatabaseDriver } from './database-drivers/dbdriver.module.js';

// src/lib/ericchase/Utility/Console.ts
function ConsoleError(...items) {
  console['error'](...items);
}

// src/index.ts
async function CreateTable(name) {
  const q = `
      CREATE TABLE ${name} (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        email TEXT NOT NULL
      );
    `;
  await db_query(q, []);
}
async function TableExists(name) {
  const q = `
    SELECT EXISTS (
      SELECT 1 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name = \$1
    );
  `;
  const { exists } = (await db_query(q, [name]))[0];
  return exists ?? false;
}
async function EnsureTableExists(name) {
  try {
    if ((await TableExists(name)) === true) {
      return true;
    } else {
      await CreateTable(name);
      return (await TableExists(name)) === true;
    }
  } catch (error) {
    ConsoleError(error);
  }
  return false;
}
var db_query = DatabaseDriver.getLocalhost();

class Page {
  divMessages;
  constructor() {
    const divMessages = document.querySelector('#messages');
    if (!divMessages) throw 'divMessages not initialized';
    this.divMessages = divMessages;
  }
  addMessage(text) {
    try {
      const div = document.createElement('div');
      const pre = document.createElement('pre');
      pre.textContent = text;
      div.appendChild(pre);
      this.divMessages.prepend(div);
      div.scrollIntoView(false);
      return div;
    } catch (error) {
      ConsoleError(error);
    }
  }
}
var page = new Page();
var tableName = 'test';
if (await EnsureTableExists(tableName)) {
  page.addMessage('Table exists.');
} else {
  page.addMessage('Is server running?');
}

//# debugId=964655ACF8A9164D64756E2164756E21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjXFxpbmRleC50cyIsICJzcmNcXGxpYlxcZXJpY2NoYXNlXFxVdGlsaXR5XFxDb25zb2xlLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWwogICAgImltcG9ydCB7IERhdGFiYXNlRHJpdmVyIH0gZnJvbSAnLi9kYXRhYmFzZS1kcml2ZXJzL2RiZHJpdmVyLm1vZHVsZS5qcyc7XG5pbXBvcnQgeyBDb25zb2xlRXJyb3IgfSBmcm9tICcuL2xpYi9lcmljY2hhc2UvVXRpbGl0eS9Db25zb2xlLmpzJztcblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcbi8vXG4vLyBQb3N0Z3JlcyBRdWVyaWVzXG5cbi8vIGNvbnN0IGRiX3F1ZXJ5ID0gRGF0YWJhc2VEcml2ZXIuZ2V0TmVvbig8aW5zZXJ0IGEgdmFsaWQgY29ubmVjdGlvbiBzdHJpbmc+KTtcbmNvbnN0IGRiX3F1ZXJ5ID0gRGF0YWJhc2VEcml2ZXIuZ2V0TG9jYWxob3N0KCk7XG5cbmFzeW5jIGZ1bmN0aW9uIENyZWF0ZVRhYmxlKG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBxID0gYFxuICAgICAgQ1JFQVRFIFRBQkxFICR7bmFtZX0gKFxuICAgICAgICBpZCBTRVJJQUwgUFJJTUFSWSBLRVksXG4gICAgICAgIG5hbWUgVEVYVCBOT1QgTlVMTCxcbiAgICAgICAgZW1haWwgVEVYVCBOT1QgTlVMTFxuICAgICAgKTtcbiAgICBgO1xuICBhd2FpdCBkYl9xdWVyeShxLCBbXSk7XG59XG5hc3luYyBmdW5jdGlvbiBUYWJsZUV4aXN0cyhuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3QgcSA9IGBcbiAgICBTRUxFQ1QgRVhJU1RTIChcbiAgICAgIFNFTEVDVCAxIFxuICAgICAgRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIFxuICAgICAgV0hFUkUgdGFibGVfc2NoZW1hID0gJ3B1YmxpYycgXG4gICAgICBBTkQgdGFibGVfbmFtZSA9ICQxXG4gICAgKTtcbiAgYDtcbiAgY29uc3QgeyBleGlzdHMgfSA9IChhd2FpdCBkYl9xdWVyeShxLCBbbmFtZV0pKVswXTtcbiAgcmV0dXJuIGV4aXN0cyA/PyBmYWxzZTtcbn1cblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcblxuYXN5bmMgZnVuY3Rpb24gRW5zdXJlVGFibGVFeGlzdHMobmFtZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIHRyeSB7XG4gICAgaWYgKChhd2FpdCBUYWJsZUV4aXN0cyhuYW1lKSkgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCBDcmVhdGVUYWJsZShuYW1lKTtcbiAgICAgIHJldHVybiAoYXdhaXQgVGFibGVFeGlzdHMobmFtZSkpID09PSB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb25zb2xlRXJyb3IoZXJyb3IpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcblxuY2xhc3MgUGFnZSB7XG4gIGRpdk1lc3NhZ2VzOiBFbGVtZW50O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBkaXZNZXNzYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZXNzYWdlcycpO1xuICAgIGlmICghZGl2TWVzc2FnZXMpIHRocm93ICdkaXZNZXNzYWdlcyBub3QgaW5pdGlhbGl6ZWQnO1xuICAgIHRoaXMuZGl2TWVzc2FnZXMgPSBkaXZNZXNzYWdlcztcbiAgfVxuICBhZGRNZXNzYWdlKHRleHQ6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnN0IHByZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ByZScpO1xuICAgICAgcHJlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChwcmUpO1xuICAgICAgdGhpcy5kaXZNZXNzYWdlcy5wcmVwZW5kKGRpdik7XG4gICAgICAvLyBzY3JvbGwgZGl2IGludG8gdmlld1xuICAgICAgZGl2LnNjcm9sbEludG9WaWV3KGZhbHNlKTtcbiAgICAgIHJldHVybiBkaXY7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbnNvbGVFcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHBhZ2UgPSBuZXcgUGFnZSgpO1xuXG5jb25zdCB0YWJsZU5hbWUgPSAndGVzdCc7XG5pZiAoYXdhaXQgRW5zdXJlVGFibGVFeGlzdHModGFibGVOYW1lKSkge1xuICBwYWdlLmFkZE1lc3NhZ2UoJ1RhYmxlIGV4aXN0cy4nKTtcbn0gZWxzZSB7XG4gIHBhZ2UuYWRkTWVzc2FnZSgnSXMgc2VydmVyIHJ1bm5pbmc/Jyk7XG59XG4iLAogICAgImV4cG9ydCBmdW5jdGlvbiBDb25zb2xlTG9nKC4uLml0ZW1zOiBhbnlbXSkge1xuICBjb25zb2xlWydsb2cnXSguLi5pdGVtcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gQ29uc29sZUVycm9yKC4uLml0ZW1zOiBhbnlbXSkge1xuICBjb25zb2xlWydlcnJvciddKC4uLml0ZW1zKTtcbn1cbiIKICBdLAogICJtYXBwaW5ncyI6ICI7QUFBQTs7O0FDR08sU0FBUyxZQUFZLElBQUksT0FBYztBQUM1QyxVQUFRLFNBQVMsR0FBRyxLQUFLO0FBQUE7OztBRE0zQixlQUFlLFdBQVcsQ0FBQyxNQUE2QjtBQUN0RCxRQUFNLElBQUk7QUFBQSxxQkFDUztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNbkIsUUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQUE7QUFFdEIsZUFBZSxXQUFXLENBQUMsTUFBZ0M7QUFDekQsUUFBTSxJQUFJO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFRVixVQUFRLFlBQVksTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRztBQUMvQyxTQUFPLFVBQVU7QUFBQTtBQUtuQixlQUFlLGlCQUFpQixDQUFDLE1BQWdDO0FBQy9ELE1BQUk7QUFDRixRQUFLLE1BQU0sWUFBWSxJQUFJLE1BQU8sTUFBTTtBQUN0QyxhQUFPO0FBQUEsSUFDVCxPQUFPO0FBQ0wsWUFBTSxZQUFZLElBQUk7QUFDdEIsYUFBUSxNQUFNLFlBQVksSUFBSSxNQUFPO0FBQUE7QUFBQSxXQUVoQyxPQUFQO0FBQ0EsaUJBQWEsS0FBSztBQUFBO0FBRXBCLFNBQU87QUFBQTtBQXRDVCxJQUFNLFdBQVcsZUFBZSxhQUFhO0FBMkM3QztBQUFBLE1BQU0sS0FBSztBQUFBLEVBQ1Q7QUFBQSxFQUNBLFdBQVcsR0FBRztBQUNaLFVBQU0sY0FBYyxTQUFTLGNBQWMsV0FBVztBQUN0RCxTQUFLO0FBQWEsWUFBTTtBQUN4QixTQUFLLGNBQWM7QUFBQTtBQUFBLEVBRXJCLFVBQVUsQ0FBQyxNQUFjO0FBQ3ZCLFFBQUk7QUFDRixZQUFNLE1BQU0sU0FBUyxjQUFjLEtBQUs7QUFDeEMsWUFBTSxNQUFNLFNBQVMsY0FBYyxLQUFLO0FBQ3hDLFVBQUksY0FBYztBQUNsQixVQUFJLFlBQVksR0FBRztBQUNuQixXQUFLLFlBQVksUUFBUSxHQUFHO0FBRTVCLFVBQUksZUFBZSxLQUFLO0FBQ3hCLGFBQU87QUFBQSxhQUNBLE9BQVA7QUFDQSxtQkFBYSxLQUFLO0FBQUE7QUFBQTtBQUd4QjtBQUVBLElBQU0sT0FBTyxJQUFJO0FBRWpCLElBQU0sWUFBWTtBQUNsQixJQUFJLE1BQU0sa0JBQWtCLFNBQVMsR0FBRztBQUN0QyxPQUFLLFdBQVcsZUFBZTtBQUNqQyxPQUFPO0FBQ0wsT0FBSyxXQUFXLG9CQUFvQjtBQUFBOyIsCiAgImRlYnVnSWQiOiAiOTY0NjU1QUNGOEE5MTY0RDY0NzU2RTIxNjQ3NTZFMjEiLAogICJuYW1lcyI6IFtdCn0=
